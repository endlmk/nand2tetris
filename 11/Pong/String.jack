// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int capacity, length;
    field Array buf;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        if (maxLength > 0) {
            let buf = Array.new(maxLength);
        }
        else {
            let buf = null;
        }
        let capacity = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(buf = null)) {
            do buf.dispose();
            let buf = null;
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > (length - 1))) {
            do Sys.error(15);
        }
        return buf[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > (length - 1))) {
            do Sys.error(16);
        }
        let buf[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length = capacity) {
            do Sys.error(17);
        }
        let buf[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length = 0) {
            do Sys.error(18);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        return String.string2Int(this);
    }

    function int string2Int(String s) {
        var char c;
        var int j, num_digit, digit, n, sign;
        let num_digit = s.length();
        let n = 0;
        let j = 0;
        let sign = 1;
        if (s.charAt(0) = 45) {
            let sign = -1;
            let j = 1;
        }
        while (j < num_digit) {
            let c = s.charAt(j);
            let digit = c - 48;
            let n = n * 10 + digit;
            let j = j + 1;
        }
        return sign * n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int l, j;
        // clear buffer
        let l = length();
        let j = l;
        while (j > 0) {
            do eraseLastChar();
            let j = j - 1;
        }

        if (val < 0) {
            do this.appendChar(45); // -
        }
        do String.int2String(Math.abs(val), this);
        return;
    }

    function void int2String(int n, String accum_s) {
        var int lastDigit;
        var char c;
        let lastDigit = n - ((n / 10) * 10); // mod 10
        let c = lastDigit + 48;
        if (~(n < 10)) {
            do String.int2String((n / 10), accum_s);
        }
        do accum_s.appendChar(c);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
