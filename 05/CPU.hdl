// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isA);
    Mux16(a=oM, b[0..14]=instruction[0..14], sel=isA, out=areg);
    Or(a=isA, b=instruction[5], out=isInA);
    ARegister(in=areg, load=isInA, out[0..14]=addressM, out=adrM);
    Mux16(a=adrM, b=inM, sel=instruction[12], out=outAM);
    And(a=instruction[15], b=instruction[4], out=isLoadM);
    DRegister(in=oM, load=isLoadM, out=outD);
    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=oM, zr=outZ, ng=outN);
    And(a=instruction[15], b=instruction[3], out=writeM);
    DMux8Way(in=instruction[15], sel=instruction[0..2], a=null, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    Not(in=outZ, out=outNZ);
    Not(in=outN, out=outP);
    And(a=jgt, b=outNZ, out=jgt1);
    And(a=jgt1, b=outP, out=out1);
    And(a=jeq, b=outZ, out=out2);
    Or(a=outP, b=outZ, out=jge1);
    And(a=jge, b=jge1, out=out3);
    And(a=jlt, b=outNZ, out=jlt1);
    And(a=jlt1, b=outN, out=out4);
    And(a=jne, b=outNZ, out=out5);
    Or(a=outN, b=outZ, out=jle1);
    And(a=jle, b=jle1, out=out6);
    Or8Way(in[0]=out1, in[1]=out2, in[2]=out3, in[3]=out4, in[4]=out5, in[5]=out6, in[6]=jmp, out=outjmp);
    Not(in=outjmp, out=nojmp);
    Or(a=isA, b=null, out=isInc1);
    Or(a=isInc1, b=nojmp, out=isInc);
    PC(in=adrM, load=outjmp, inc=isInc, reset=reset, out[0..14]=pc);
}