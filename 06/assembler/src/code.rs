

pub fn dest(mnemonic : &str) -> Option<[char; 3]> {
    match mnemonic {
        ""      => {Some(['0','0','0'])}
        "M"     => {Some(['0','0','1'])}
        "D"     => {Some(['0','1','0'])}
        "MD"    => {Some(['0','1','1'])}
        "A"     => {Some(['1','0','0'])}
        "AM"    => {Some(['1','0','1'])}
        "AD"    => {Some(['1','1','0'])}
        "AMD"   => {Some(['1','1','1'])}
        _       => {None}
    }
}

pub fn comp(mnemonic : &str) -> Option<[char; 7]> {
    match mnemonic {
        "0"     => {Some(['0','1','0','1','0','1','0'])}
        "1"     => {Some(['0','1','1','1','1','1','1'])}
        "-1"    => {Some(['0','1','1','1','0','1','0'])}
        "D"     => {Some(['0','0','0','1','1','0','0'])}
        "A"     => {Some(['0','1','1','0','0','0','0'])}
        "!D"    => {Some(['0','0','0','1','1','0','1'])}
        "!A"    => {Some(['0','1','1','0','0','0','1'])}
        "-D"    => {Some(['0','0','0','1','1','1','1'])}
        "-A"    => {Some(['0','1','1','0','0','1','1'])}
        "D+1"   => {Some(['0','0','1','1','1','1','1'])}
        "A+1"   => {Some(['0','1','1','0','1','1','1'])}
        "D-1"   => {Some(['0','0','0','1','1','1','0'])}
        "A-1"   => {Some(['0','1','1','0','0','1','0'])}
        "D+A"   => {Some(['0','0','0','0','0','1','0'])}
        "D-A"   => {Some(['0','0','1','0','0','1','1'])}
        "A-D"   => {Some(['0','0','0','0','1','1','1'])}
        "D&A"   => {Some(['0','0','0','0','0','0','0'])}
        "D|A"   => {Some(['0','0','1','0','1','0','1'])}
        "M"     => {Some(['1','1','1','0','0','0','0'])}
        "!M"    => {Some(['1','1','1','0','0','0','1'])}
        "-M"    => {Some(['1','1','1','0','0','1','1'])}
        "M+1"   => {Some(['1','1','1','0','1','1','1'])}
        "M-1"   => {Some(['1','1','1','0','0','1','0'])}
        "D+M"   => {Some(['1','0','0','0','0','1','0'])}
        "D-M"   => {Some(['1','0','1','0','0','1','1'])}
        "M-D"   => {Some(['1','0','0','0','1','1','1'])}
        "D&M"   => {Some(['1','0','0','0','0','0','0'])}
        "D|M"   => {Some(['1','0','1','0','1','0','1'])}
        _       => {None}
    }
}

pub fn jump(mnemonic : &str) -> Option<[char; 3]> {
    match mnemonic {
        ""      => {Some(['0','0','0'])}
        "JGT"   => {Some(['0','0','1'])}
        "JEQ"   => {Some(['0','1','0'])}
        "JGE"   => {Some(['0','1','1'])}
        "JLT"   => {Some(['1','0','0'])}
        "JNE"   => {Some(['1','0','1'])}
        "JLE"   => {Some(['1','1','0'])}
        "JMP"   => {Some(['1','1','1'])}
        _       => {None}
    }
}